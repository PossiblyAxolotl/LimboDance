[gd_scene load_steps=23 format=2]

[ext_resource path="res://Jellee-Bold.otf" type="DynamicFontData" id=1]
[ext_resource path="res://levels/rng.gd" type="Script" id=2]
[ext_resource path="res://levels/finish.gd" type="Script" id=3]
[ext_resource path="res://player/Player.tscn" type="PackedScene" id=4]
[ext_resource path="res://obstacles/spawner/randomObstacle.tscn" type="PackedScene" id=5]
[ext_resource path="res://win.wav" type="AudioStream" id=6]

[sub_resource type="CubeMesh" id=1]
size = Vector3( 100, 10, 8 )

[sub_resource type="SpatialMaterial" id=2]
flags_unshaded = true

[sub_resource type="ArrayMesh" id=3]
surfaces/0 = {
"aabb": AABB( -50.1155, -5.11547, -4.11547, 100.231, 10.2309, 8.23095 ),
"array_data": PoolByteArray( 62, 118, 72, 194, 238, 177, 163, 64, 238, 177, 131, 64, 0, 0, 127, 0, 127, 0, 0, 127, 0, 0, 0, 0, 62, 118, 72, 66, 238, 177, 163, 64, 238, 177, 131, 192, 0, 0, 129, 0, 129, 0, 0, 127, 85, 57, 0, 0, 62, 118, 72, 66, 238, 177, 163, 64, 238, 177, 131, 64, 0, 0, 127, 0, 127, 0, 0, 127, 85, 53, 0, 0, 62, 118, 72, 194, 238, 177, 163, 64, 238, 177, 131, 192, 0, 0, 129, 0, 129, 0, 0, 127, 0, 60, 0, 0, 62, 118, 72, 194, 238, 177, 163, 192, 238, 177, 131, 64, 0, 0, 127, 0, 127, 0, 0, 127, 0, 0, 0, 56, 62, 118, 72, 66, 238, 177, 163, 192, 238, 177, 131, 192, 0, 0, 129, 0, 129, 0, 0, 127, 85, 57, 0, 56, 62, 118, 72, 66, 238, 177, 163, 192, 238, 177, 131, 64, 0, 0, 127, 0, 127, 0, 0, 127, 85, 53, 0, 56, 62, 118, 72, 194, 238, 177, 163, 192, 238, 177, 131, 192, 0, 0, 129, 0, 129, 0, 0, 127, 0, 60, 0, 56, 62, 118, 72, 66, 238, 177, 163, 64, 238, 177, 131, 64, 127, 0, 0, 0, 0, 0, 129, 127, 85, 53, 0, 0, 62, 118, 72, 194, 238, 177, 163, 64, 238, 177, 131, 192, 129, 0, 0, 0, 0, 0, 127, 127, 0, 0, 0, 56, 62, 118, 72, 66, 238, 177, 163, 64, 238, 177, 131, 192, 127, 0, 0, 0, 0, 0, 129, 127, 85, 57, 0, 0, 62, 118, 72, 194, 238, 177, 163, 64, 238, 177, 131, 64, 129, 0, 0, 0, 0, 0, 127, 127, 85, 53, 0, 56, 62, 118, 72, 66, 238, 177, 163, 192, 238, 177, 131, 64, 127, 0, 0, 0, 0, 0, 129, 127, 85, 53, 0, 56, 62, 118, 72, 194, 238, 177, 163, 192, 238, 177, 131, 192, 129, 0, 0, 0, 0, 0, 127, 127, 0, 0, 0, 60, 62, 118, 72, 66, 238, 177, 163, 192, 238, 177, 131, 192, 127, 0, 0, 0, 0, 0, 129, 127, 85, 57, 0, 56, 62, 118, 72, 194, 238, 177, 163, 192, 238, 177, 131, 64, 129, 0, 0, 0, 0, 0, 127, 127, 85, 53, 0, 60, 62, 118, 72, 66, 238, 177, 163, 64, 238, 177, 131, 64, 0, 127, 0, 0, 129, 0, 0, 127, 85, 53, 0, 56, 62, 118, 72, 194, 238, 177, 163, 192, 238, 177, 131, 64, 0, 129, 0, 0, 127, 0, 0, 127, 85, 57, 0, 56, 62, 118, 72, 194, 238, 177, 163, 64, 238, 177, 131, 64, 0, 127, 0, 0, 129, 0, 0, 127, 85, 57, 0, 56, 62, 118, 72, 66, 238, 177, 163, 192, 238, 177, 131, 64, 0, 129, 0, 0, 127, 0, 0, 127, 0, 60, 0, 56, 62, 118, 72, 66, 238, 177, 163, 64, 238, 177, 131, 192, 0, 127, 0, 0, 129, 0, 0, 127, 85, 53, 0, 60, 62, 118, 72, 194, 238, 177, 163, 192, 238, 177, 131, 192, 0, 129, 0, 0, 127, 0, 0, 127, 85, 57, 0, 60, 62, 118, 72, 194, 238, 177, 163, 64, 238, 177, 131, 192, 0, 127, 0, 0, 129, 0, 0, 127, 85, 57, 0, 60, 62, 118, 72, 66, 238, 177, 163, 192, 238, 177, 131, 192, 0, 129, 0, 0, 127, 0, 0, 127, 0, 60, 0, 60 ),
"array_index_data": PoolByteArray( 0, 0, 4, 0, 2, 0, 2, 0, 4, 0, 6, 0, 1, 0, 5, 0, 3, 0, 3, 0, 5, 0, 7, 0, 8, 0, 12, 0, 10, 0, 10, 0, 12, 0, 14, 0, 9, 0, 13, 0, 11, 0, 11, 0, 13, 0, 15, 0, 16, 0, 20, 0, 18, 0, 18, 0, 20, 0, 22, 0, 17, 0, 21, 0, 19, 0, 19, 0, 21, 0, 23, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 36,
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 24
}

[sub_resource type="SpatialMaterial" id=4]
flags_unshaded = true
albedo_color = Color( 0, 0, 0, 1 )

[sub_resource type="Shader" id=5]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx, unshaded;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.5);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )

[sub_resource type="Shader" id=7]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx, unshaded;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.9113934636116028, 0.9113934636116028,
		0.9113934636116028, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.5);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )

[sub_resource type="ArrayMesh" id=9]
surfaces/0 = {
"aabb": AABB( -1, -1, -1, 2, 2, 2 ),
"array_data": PoolByteArray( 0, 0, 128, 191, 0, 0, 128, 191, 176, 170, 42, 191, 129, 0, 0, 0, 0, 127, 0, 127, 0, 54, 85, 58, 0, 0, 128, 191, 0, 0, 128, 63, 176, 170, 42, 191, 129, 0, 0, 0, 0, 127, 0, 127, 0, 57, 85, 58, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 191, 129, 0, 0, 0, 0, 127, 0, 127, 0, 57, 0, 58, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 191, 129, 0, 0, 0, 0, 127, 0, 127, 0, 54, 0, 58, 0, 0, 128, 63, 0, 0, 128, 191, 176, 170, 42, 63, 127, 0, 0, 0, 0, 127, 0, 127, 0, 54, 170, 52, 0, 0, 128, 63, 0, 0, 128, 63, 176, 170, 42, 63, 127, 0, 0, 0, 0, 127, 0, 127, 0, 57, 170, 52, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 127, 0, 0, 0, 0, 127, 0, 127, 0, 57, 0, 52, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 63, 127, 0, 0, 0, 0, 127, 0, 127, 0, 54, 0, 52, 0, 0, 0, 0, 0, 0, 128, 191, 176, 170, 42, 63, 0, 129, 0, 0, 127, 0, 0, 127, 0, 52, 170, 52, 0, 0, 128, 63, 0, 0, 128, 191, 176, 170, 42, 63, 0, 129, 0, 0, 127, 0, 0, 127, 0, 54, 170, 52, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 63, 0, 129, 0, 0, 127, 0, 0, 127, 0, 54, 0, 52, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 63, 0, 129, 0, 0, 127, 0, 0, 127, 0, 52, 0, 52, 0, 0, 128, 63, 0, 0, 128, 63, 176, 170, 42, 63, 0, 127, 0, 0, 129, 0, 0, 127, 0, 57, 170, 52, 0, 0, 0, 0, 0, 0, 128, 63, 176, 170, 42, 63, 0, 127, 0, 0, 129, 0, 0, 127, 0, 58, 170, 52, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 63, 0, 127, 0, 0, 129, 0, 0, 127, 0, 58, 0, 52, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 127, 0, 0, 129, 0, 0, 127, 0, 57, 0, 52, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 127, 0, 0, 127, 0, 127, 0, 54, 0, 52, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 127, 0, 0, 127, 0, 127, 0, 57, 0, 52, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 127, 0, 0, 127, 0, 127, 0, 57, 0, 48, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 127, 0, 0, 127, 0, 127, 0, 54, 0, 48, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 129, 0, 0, 127, 0, 127, 0, 54, 0, 58, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 129, 0, 0, 127, 0, 127, 0, 57, 0, 58, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 129, 0, 0, 127, 0, 127, 0, 57, 0, 57, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 129, 0, 0, 127, 0, 127, 0, 54, 0, 57, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 191, 0, 129, 0, 0, 127, 0, 0, 127, 0, 48, 0, 56, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 191, 0, 129, 0, 0, 127, 0, 0, 127, 0, 52, 0, 56, 0, 0, 0, 0, 0, 0, 128, 191, 176, 170, 42, 191, 0, 129, 0, 0, 127, 0, 0, 127, 0, 52, 85, 55, 0, 0, 128, 191, 0, 0, 128, 191, 176, 170, 42, 191, 0, 129, 0, 0, 127, 0, 0, 127, 0, 48, 85, 55, 0, 0, 128, 191, 0, 0, 128, 191, 159, 170, 170, 190, 0, 129, 0, 0, 127, 0, 0, 127, 0, 48, 170, 54, 0, 0, 0, 0, 0, 0, 128, 191, 159, 170, 170, 190, 0, 129, 0, 0, 127, 0, 0, 127, 0, 52, 170, 54, 0, 0, 0, 0, 0, 0, 128, 191, 243, 255, 255, 50, 0, 129, 0, 0, 127, 0, 0, 127, 0, 52, 0, 54, 0, 0, 128, 191, 0, 0, 128, 191, 243, 255, 255, 50, 0, 129, 0, 0, 127, 0, 0, 127, 0, 48, 0, 54, 0, 0, 128, 191, 0, 0, 128, 191, 159, 170, 170, 62, 0, 129, 0, 0, 127, 0, 0, 127, 0, 48, 85, 53, 0, 0, 0, 0, 0, 0, 128, 191, 159, 170, 170, 62, 0, 129, 0, 0, 127, 0, 0, 127, 0, 52, 85, 53, 0, 0, 128, 191, 0, 0, 128, 191, 176, 170, 42, 63, 0, 129, 0, 0, 127, 0, 0, 127, 0, 48, 170, 52, 0, 0, 128, 63, 0, 0, 128, 63, 176, 170, 42, 191, 0, 127, 0, 0, 129, 0, 0, 127, 0, 57, 85, 55, 0, 0, 0, 0, 0, 0, 128, 63, 176, 170, 42, 191, 0, 127, 0, 0, 129, 0, 0, 127, 0, 58, 85, 55, 0, 0, 0, 0, 0, 0, 128, 63, 159, 170, 170, 190, 0, 127, 0, 0, 129, 0, 0, 127, 0, 58, 170, 54, 0, 0, 128, 63, 0, 0, 128, 63, 159, 170, 170, 190, 0, 127, 0, 0, 129, 0, 0, 127, 0, 57, 170, 54, 0, 0, 128, 63, 0, 0, 128, 63, 243, 255, 255, 50, 0, 127, 0, 0, 129, 0, 0, 127, 0, 57, 0, 54, 0, 0, 0, 0, 0, 0, 128, 63, 243, 255, 255, 50, 0, 127, 0, 0, 129, 0, 0, 127, 0, 58, 0, 54, 0, 0, 0, 0, 0, 0, 128, 63, 159, 170, 170, 62, 0, 127, 0, 0, 129, 0, 0, 127, 0, 58, 85, 53, 0, 0, 128, 63, 0, 0, 128, 63, 159, 170, 170, 62, 0, 127, 0, 0, 129, 0, 0, 127, 0, 57, 85, 53, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 191, 0, 127, 0, 0, 129, 0, 0, 127, 0, 58, 0, 56, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 191, 0, 127, 0, 0, 129, 0, 0, 127, 0, 59, 0, 56, 0, 0, 128, 191, 0, 0, 128, 63, 176, 170, 42, 191, 0, 127, 0, 0, 129, 0, 0, 127, 0, 59, 85, 55, 0, 0, 128, 191, 0, 0, 128, 63, 159, 170, 170, 190, 0, 127, 0, 0, 129, 0, 0, 127, 0, 59, 170, 54, 0, 0, 128, 191, 0, 0, 128, 63, 243, 255, 255, 178, 0, 127, 0, 0, 129, 0, 0, 127, 0, 59, 0, 54, 0, 0, 128, 191, 0, 0, 128, 63, 159, 170, 170, 62, 0, 127, 0, 0, 129, 0, 0, 127, 0, 59, 85, 53, 0, 0, 128, 191, 0, 0, 128, 63, 176, 170, 42, 63, 0, 127, 0, 0, 129, 0, 0, 127, 0, 59, 170, 52, 0, 0, 128, 63, 0, 0, 128, 191, 176, 170, 42, 191, 0, 129, 0, 0, 127, 0, 0, 127, 0, 54, 85, 55, 0, 0, 128, 63, 0, 0, 128, 191, 159, 170, 170, 190, 0, 129, 0, 0, 127, 0, 0, 127, 0, 54, 170, 54, 0, 0, 128, 63, 0, 0, 128, 191, 243, 255, 255, 178, 0, 129, 0, 0, 127, 0, 0, 127, 0, 54, 0, 54, 0, 0, 128, 63, 0, 0, 128, 191, 159, 170, 170, 62, 0, 129, 0, 0, 127, 0, 0, 127, 0, 54, 85, 53, 0, 0, 128, 63, 0, 0, 128, 191, 176, 170, 42, 191, 127, 0, 0, 0, 0, 127, 0, 127, 0, 54, 85, 55, 0, 0, 128, 63, 0, 0, 128, 63, 176, 170, 42, 191, 127, 0, 0, 0, 0, 127, 0, 127, 0, 57, 85, 55, 0, 0, 128, 63, 0, 0, 128, 63, 159, 170, 170, 190, 127, 0, 0, 0, 0, 127, 0, 127, 0, 57, 170, 54, 0, 0, 128, 63, 0, 0, 128, 191, 159, 170, 170, 190, 127, 0, 0, 0, 0, 127, 0, 127, 0, 54, 170, 54, 0, 0, 128, 63, 0, 0, 128, 191, 243, 255, 255, 178, 127, 0, 0, 0, 0, 127, 0, 127, 0, 54, 0, 54, 0, 0, 128, 63, 0, 0, 128, 63, 243, 255, 255, 50, 127, 0, 0, 0, 0, 127, 0, 127, 0, 57, 0, 54, 0, 0, 128, 63, 0, 0, 128, 63, 159, 170, 170, 62, 127, 0, 0, 0, 0, 127, 0, 127, 0, 57, 85, 53, 0, 0, 128, 63, 0, 0, 128, 191, 159, 170, 170, 62, 127, 0, 0, 0, 0, 127, 0, 127, 0, 54, 85, 53, 0, 0, 128, 191, 0, 0, 128, 191, 176, 170, 42, 63, 129, 0, 0, 0, 0, 127, 0, 127, 0, 54, 170, 59, 0, 0, 128, 191, 0, 0, 128, 63, 176, 170, 42, 63, 129, 0, 0, 0, 0, 127, 0, 127, 0, 57, 170, 59, 0, 0, 128, 191, 0, 0, 128, 63, 159, 170, 170, 62, 129, 0, 0, 0, 0, 127, 0, 127, 0, 57, 85, 59, 0, 0, 128, 191, 0, 0, 128, 191, 159, 170, 170, 62, 129, 0, 0, 0, 0, 127, 0, 127, 0, 54, 85, 59, 0, 0, 128, 191, 0, 0, 128, 191, 243, 255, 255, 50, 129, 0, 0, 0, 0, 127, 0, 127, 0, 54, 0, 59, 0, 0, 128, 191, 0, 0, 128, 63, 243, 255, 255, 178, 129, 0, 0, 0, 0, 127, 0, 127, 0, 57, 0, 59, 0, 0, 128, 191, 0, 0, 128, 63, 159, 170, 170, 190, 129, 0, 0, 0, 0, 127, 0, 127, 0, 57, 170, 58, 0, 0, 128, 191, 0, 0, 128, 191, 159, 170, 170, 190, 129, 0, 0, 0, 0, 127, 0, 127, 0, 54, 170, 58 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 0, 0, 3, 0, 2, 0, 4, 0, 6, 0, 5, 0, 4, 0, 7, 0, 6, 0, 8, 0, 10, 0, 9, 0, 8, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 12, 0, 15, 0, 14, 0, 16, 0, 18, 0, 17, 0, 16, 0, 19, 0, 18, 0, 20, 0, 22, 0, 21, 0, 20, 0, 23, 0, 22, 0, 24, 0, 26, 0, 25, 0, 24, 0, 27, 0, 26, 0, 28, 0, 30, 0, 29, 0, 28, 0, 31, 0, 30, 0, 32, 0, 8, 0, 33, 0, 32, 0, 34, 0, 8, 0, 35, 0, 37, 0, 36, 0, 35, 0, 38, 0, 37, 0, 39, 0, 41, 0, 40, 0, 39, 0, 42, 0, 41, 0, 43, 0, 45, 0, 44, 0, 43, 0, 36, 0, 45, 0, 37, 0, 47, 0, 46, 0, 37, 0, 40, 0, 47, 0, 41, 0, 49, 0, 48, 0, 41, 0, 13, 0, 49, 0, 26, 0, 51, 0, 50, 0, 26, 0, 29, 0, 51, 0, 30, 0, 53, 0, 52, 0, 30, 0, 33, 0, 53, 0, 54, 0, 56, 0, 55, 0, 54, 0, 57, 0, 56, 0, 58, 0, 60, 0, 59, 0, 58, 0, 61, 0, 60, 0, 62, 0, 64, 0, 63, 0, 62, 0, 65, 0, 64, 0, 66, 0, 68, 0, 67, 0, 66, 0, 69, 0, 68, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 120,
"material": SubResource( 6 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 70
}
surfaces/1 = {
"aabb": AABB( -1, -1, -1, 2, 2, 2 ),
"array_data": PoolByteArray( 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 129, 0, 0, 127, 0, 127, 0, 54, 0, 57, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 129, 0, 0, 127, 0, 127, 0, 57, 0, 57, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 129, 0, 0, 127, 0, 127, 0, 57, 0, 56, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 129, 0, 0, 127, 0, 127, 0, 54, 0, 56, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 127, 0, 0, 127, 0, 127, 0, 54, 0, 48, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 127, 0, 0, 127, 0, 127, 0, 57, 0, 48, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 127, 0, 0, 127, 0, 127, 0, 57, 0, 0, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 127, 0, 0, 127, 0, 127, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 176, 170, 42, 63, 0, 127, 0, 0, 129, 0, 0, 127, 0, 58, 170, 52, 0, 0, 128, 191, 0, 0, 128, 63, 176, 170, 42, 63, 0, 127, 0, 0, 129, 0, 0, 127, 0, 59, 170, 52, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 63, 0, 127, 0, 0, 129, 0, 0, 127, 0, 59, 0, 52, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 63, 0, 127, 0, 0, 129, 0, 0, 127, 0, 58, 0, 52, 0, 0, 128, 191, 0, 0, 128, 191, 176, 170, 42, 63, 0, 129, 0, 0, 127, 0, 0, 127, 0, 48, 170, 52, 0, 0, 0, 0, 0, 0, 128, 191, 176, 170, 42, 63, 0, 129, 0, 0, 127, 0, 0, 127, 0, 52, 170, 52, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 63, 0, 129, 0, 0, 127, 0, 0, 127, 0, 52, 0, 52, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 63, 0, 129, 0, 0, 127, 0, 0, 127, 0, 48, 0, 52, 0, 0, 128, 191, 0, 0, 128, 191, 176, 170, 42, 191, 0, 129, 0, 0, 127, 0, 0, 127, 0, 48, 85, 55, 0, 0, 0, 0, 0, 0, 128, 191, 176, 170, 42, 191, 0, 129, 0, 0, 127, 0, 0, 127, 0, 52, 85, 55, 0, 0, 0, 0, 0, 0, 128, 191, 159, 170, 170, 190, 0, 129, 0, 0, 127, 0, 0, 127, 0, 52, 170, 54, 0, 0, 128, 191, 0, 0, 128, 191, 159, 170, 170, 190, 0, 129, 0, 0, 127, 0, 0, 127, 0, 48, 170, 54, 0, 0, 128, 191, 0, 0, 128, 191, 243, 255, 255, 50, 0, 129, 0, 0, 127, 0, 0, 127, 0, 48, 0, 54, 0, 0, 0, 0, 0, 0, 128, 191, 243, 255, 255, 50, 0, 129, 0, 0, 127, 0, 0, 127, 0, 52, 0, 54, 0, 0, 0, 0, 0, 0, 128, 191, 159, 170, 170, 62, 0, 129, 0, 0, 127, 0, 0, 127, 0, 52, 85, 53, 0, 0, 128, 191, 0, 0, 128, 191, 159, 170, 170, 62, 0, 129, 0, 0, 127, 0, 0, 127, 0, 48, 85, 53, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 191, 0, 127, 0, 0, 129, 0, 0, 127, 0, 57, 0, 56, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 128, 191, 0, 127, 0, 0, 129, 0, 0, 127, 0, 58, 0, 56, 0, 0, 0, 0, 0, 0, 128, 63, 176, 170, 42, 191, 0, 127, 0, 0, 129, 0, 0, 127, 0, 58, 85, 55, 0, 0, 128, 63, 0, 0, 128, 63, 176, 170, 42, 191, 0, 127, 0, 0, 129, 0, 0, 127, 0, 57, 85, 55, 0, 0, 128, 63, 0, 0, 128, 63, 159, 170, 170, 190, 0, 127, 0, 0, 129, 0, 0, 127, 0, 57, 170, 54, 0, 0, 0, 0, 0, 0, 128, 63, 159, 170, 170, 190, 0, 127, 0, 0, 129, 0, 0, 127, 0, 58, 170, 54, 0, 0, 0, 0, 0, 0, 128, 63, 243, 255, 255, 50, 0, 127, 0, 0, 129, 0, 0, 127, 0, 58, 0, 54, 0, 0, 128, 63, 0, 0, 128, 63, 243, 255, 255, 50, 0, 127, 0, 0, 129, 0, 0, 127, 0, 57, 0, 54, 0, 0, 128, 63, 0, 0, 128, 63, 159, 170, 170, 62, 0, 127, 0, 0, 129, 0, 0, 127, 0, 57, 85, 53, 0, 0, 0, 0, 0, 0, 128, 63, 159, 170, 170, 62, 0, 127, 0, 0, 129, 0, 0, 127, 0, 58, 85, 53, 0, 0, 128, 63, 0, 0, 128, 63, 176, 170, 42, 63, 0, 127, 0, 0, 129, 0, 0, 127, 0, 57, 170, 52, 0, 0, 128, 191, 0, 0, 128, 63, 176, 170, 42, 191, 0, 127, 0, 0, 129, 0, 0, 127, 0, 59, 85, 55, 0, 0, 128, 191, 0, 0, 128, 63, 159, 170, 170, 190, 0, 127, 0, 0, 129, 0, 0, 127, 0, 59, 170, 54, 0, 0, 128, 191, 0, 0, 128, 63, 243, 255, 255, 178, 0, 127, 0, 0, 129, 0, 0, 127, 0, 59, 0, 54, 0, 0, 128, 191, 0, 0, 128, 63, 159, 170, 170, 62, 0, 127, 0, 0, 129, 0, 0, 127, 0, 59, 85, 53, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 191, 0, 129, 0, 0, 127, 0, 0, 127, 0, 52, 0, 56, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 191, 0, 129, 0, 0, 127, 0, 0, 127, 0, 54, 0, 56, 0, 0, 128, 63, 0, 0, 128, 191, 176, 170, 42, 191, 0, 129, 0, 0, 127, 0, 0, 127, 0, 54, 85, 55, 0, 0, 128, 63, 0, 0, 128, 191, 159, 170, 170, 190, 0, 129, 0, 0, 127, 0, 0, 127, 0, 54, 170, 54, 0, 0, 128, 63, 0, 0, 128, 191, 243, 255, 255, 178, 0, 129, 0, 0, 127, 0, 0, 127, 0, 54, 0, 54, 0, 0, 128, 63, 0, 0, 128, 191, 159, 170, 170, 62, 0, 129, 0, 0, 127, 0, 0, 127, 0, 54, 85, 53, 0, 0, 128, 63, 0, 0, 128, 191, 176, 170, 42, 63, 0, 129, 0, 0, 127, 0, 0, 127, 0, 54, 170, 52, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 191, 127, 0, 0, 0, 0, 127, 0, 127, 0, 54, 0, 56, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 191, 127, 0, 0, 0, 0, 127, 0, 127, 0, 57, 0, 56, 0, 0, 128, 63, 0, 0, 128, 63, 176, 170, 42, 191, 127, 0, 0, 0, 0, 127, 0, 127, 0, 57, 85, 55, 0, 0, 128, 63, 0, 0, 128, 191, 176, 170, 42, 191, 127, 0, 0, 0, 0, 127, 0, 127, 0, 54, 85, 55, 0, 0, 128, 63, 0, 0, 128, 191, 159, 170, 170, 190, 127, 0, 0, 0, 0, 127, 0, 127, 0, 54, 170, 54, 0, 0, 128, 63, 0, 0, 128, 63, 159, 170, 170, 190, 127, 0, 0, 0, 0, 127, 0, 127, 0, 57, 170, 54, 0, 0, 128, 63, 0, 0, 128, 63, 243, 255, 255, 50, 127, 0, 0, 0, 0, 127, 0, 127, 0, 57, 0, 54, 0, 0, 128, 63, 0, 0, 128, 191, 243, 255, 255, 178, 127, 0, 0, 0, 0, 127, 0, 127, 0, 54, 0, 54, 0, 0, 128, 63, 0, 0, 128, 191, 159, 170, 170, 62, 127, 0, 0, 0, 0, 127, 0, 127, 0, 54, 85, 53, 0, 0, 128, 63, 0, 0, 128, 63, 159, 170, 170, 62, 127, 0, 0, 0, 0, 127, 0, 127, 0, 57, 85, 53, 0, 0, 128, 63, 0, 0, 128, 63, 176, 170, 42, 63, 127, 0, 0, 0, 0, 127, 0, 127, 0, 57, 170, 52, 0, 0, 128, 63, 0, 0, 128, 191, 176, 170, 42, 63, 127, 0, 0, 0, 0, 127, 0, 127, 0, 54, 170, 52, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 63, 129, 0, 0, 0, 0, 127, 0, 127, 0, 54, 0, 60, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 63, 129, 0, 0, 0, 0, 127, 0, 127, 0, 57, 0, 60, 0, 0, 128, 191, 0, 0, 128, 63, 176, 170, 42, 63, 129, 0, 0, 0, 0, 127, 0, 127, 0, 57, 170, 59, 0, 0, 128, 191, 0, 0, 128, 191, 176, 170, 42, 63, 129, 0, 0, 0, 0, 127, 0, 127, 0, 54, 170, 59, 0, 0, 128, 191, 0, 0, 128, 191, 159, 170, 170, 62, 129, 0, 0, 0, 0, 127, 0, 127, 0, 54, 85, 59, 0, 0, 128, 191, 0, 0, 128, 63, 159, 170, 170, 62, 129, 0, 0, 0, 0, 127, 0, 127, 0, 57, 85, 59, 0, 0, 128, 191, 0, 0, 128, 63, 243, 255, 255, 178, 129, 0, 0, 0, 0, 127, 0, 127, 0, 57, 0, 59, 0, 0, 128, 191, 0, 0, 128, 191, 243, 255, 255, 50, 129, 0, 0, 0, 0, 127, 0, 127, 0, 54, 0, 59, 0, 0, 128, 191, 0, 0, 128, 191, 159, 170, 170, 190, 129, 0, 0, 0, 0, 127, 0, 127, 0, 54, 170, 58, 0, 0, 128, 191, 0, 0, 128, 63, 159, 170, 170, 190, 129, 0, 0, 0, 0, 127, 0, 127, 0, 57, 170, 58, 0, 0, 128, 191, 0, 0, 128, 63, 176, 170, 42, 191, 129, 0, 0, 0, 0, 127, 0, 127, 0, 57, 85, 58, 0, 0, 128, 191, 0, 0, 128, 191, 176, 170, 42, 191, 129, 0, 0, 0, 0, 127, 0, 127, 0, 54, 85, 58 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 0, 0, 3, 0, 2, 0, 4, 0, 6, 0, 5, 0, 4, 0, 7, 0, 6, 0, 8, 0, 10, 0, 9, 0, 8, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 12, 0, 15, 0, 14, 0, 16, 0, 18, 0, 17, 0, 16, 0, 19, 0, 18, 0, 20, 0, 22, 0, 21, 0, 20, 0, 23, 0, 22, 0, 24, 0, 26, 0, 25, 0, 24, 0, 27, 0, 26, 0, 28, 0, 30, 0, 29, 0, 28, 0, 31, 0, 30, 0, 32, 0, 8, 0, 33, 0, 32, 0, 34, 0, 8, 0, 26, 0, 36, 0, 35, 0, 26, 0, 29, 0, 36, 0, 30, 0, 38, 0, 37, 0, 30, 0, 33, 0, 38, 0, 39, 0, 41, 0, 40, 0, 39, 0, 17, 0, 41, 0, 18, 0, 43, 0, 42, 0, 18, 0, 21, 0, 43, 0, 22, 0, 45, 0, 44, 0, 22, 0, 13, 0, 45, 0, 46, 0, 48, 0, 47, 0, 46, 0, 49, 0, 48, 0, 50, 0, 52, 0, 51, 0, 50, 0, 53, 0, 52, 0, 54, 0, 56, 0, 55, 0, 54, 0, 57, 0, 56, 0, 58, 0, 60, 0, 59, 0, 58, 0, 61, 0, 60, 0, 62, 0, 64, 0, 63, 0, 62, 0, 65, 0, 64, 0, 66, 0, 68, 0, 67, 0, 66, 0, 69, 0, 68, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 120,
"material": SubResource( 8 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 70
}

[sub_resource type="SpatialMaterial" id=10]
flags_unshaded = true
params_cull_mode = 1
params_grow = true
params_grow_amount = 0.209
albedo_color = Color( 0, 0, 0, 1 )

[sub_resource type="SpatialMaterial" id=11]
next_pass = SubResource( 10 )
flags_unshaded = true
albedo_color = Color( 1, 0.24447, 0, 1 )

[sub_resource type="SphereMesh" id=12]
material = SubResource( 11 )

[sub_resource type="Curve" id=13]
_data = [ Vector2( 0, 0 ), 0.0, 0.0, 0, 0, Vector2( 0.22093, 1 ), 0.0, 0.0, 0, 0, Vector2( 0.837209, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 0 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="Animation" id=14]
resource_name = "clr"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("CPUParticles:mesh:material:albedo_color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 0, 0, 1 ), Color( 1, 0.913725, 0, 1 ) ]
}

[sub_resource type="BoxShape" id=15]
extents = Vector3( 1, 2, 3 )

[sub_resource type="DynamicFont" id=16]
size = 27
outline_size = 3
outline_color = Color( 0, 0, 0, 1 )
use_mipmaps = true
use_filter = true
font_data = ExtResource( 1 )

[node name="Spatial" type="Spatial"]
script = ExtResource( 2 )

[node name="Player" parent="." instance=ExtResource( 4 )]

[node name="randomObstacle" parent="." instance=ExtResource( 5 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 8, 0, 0 )

[node name="randomObstacle2" parent="." instance=ExtResource( 5 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 16, 0, 0 )

[node name="randomObstacle3" parent="." instance=ExtResource( 5 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 24, 0, 0 )

[node name="randomObstacle4" parent="." instance=ExtResource( 5 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 32, 0, 0 )

[node name="randomObstacle5" parent="." instance=ExtResource( 5 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 40, 0, 0 )

[node name="randomObstacle6" parent="." instance=ExtResource( 5 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 48, 0, 0 )

[node name="randomObstacle7" parent="." instance=ExtResource( 5 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 56, 0, 0 )

[node name="randomObstacle8" parent="." instance=ExtResource( 5 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 64, 0, 0 )

[node name="randomObstacle9" parent="." instance=ExtResource( 5 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 72, 0, 0 )

[node name="randomObstacle10" parent="." instance=ExtResource( 5 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 80, 0, 0 )

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 42, -5, 0 )
mesh = SubResource( 1 )
material/0 = SubResource( 2 )

[node name="MeshInstance" type="MeshInstance" parent="MeshInstance"]
mesh = SubResource( 3 )
material/0 = SubResource( 4 )

[node name="finish" type="Spatial" parent="."]
transform = Transform( 1.4, 0, 0, 0, 1.4, 0, 0, 0, 1.4, 88, 0, 0 )
script = ExtResource( 3 )

[node name="Cube" type="MeshInstance" parent="finish"]
transform = Transform( 1, 0, 0, 0, -0.194753, 0, 0, 0, 3, 0, 0, 0 )
mesh = SubResource( 9 )
material/0 = null
material/1 = null

[node name="CPUParticles" type="CPUParticles" parent="finish"]
emitting = false
amount = 32
one_shot = true
explosiveness = 0.62
mesh = SubResource( 12 )
emission_shape = 2
emission_box_extents = Vector3( 1, 1, 2.738 )
direction = Vector3( 0, 1, 0 )
gravity = Vector3( 0, 0, 0 )
initial_velocity = 7.67
initial_velocity_random = 0.13
scale_amount = 0.4
scale_amount_curve = SubResource( 13 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="finish"]
autoplay = "clr"
anims/clr = SubResource( 14 )

[node name="Area" type="Area" parent="finish"]

[node name="CollisionShape" type="CollisionShape" parent="finish/Area"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.14286, 0 )
shape = SubResource( 15 )

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="finish"]
stream = ExtResource( 6 )
volume_db = -7.145

[node name="Label" type="Label" parent="."]
margin_right = 665.0
margin_bottom = 100.0
custom_fonts/font = SubResource( 16 )
text = "Left click or press [Space] to jump forwards
hold right click or [Control] to get up faster

Don't lean too far back or hit any obstacles"
__meta__ = {
"_edit_use_anchors_": false
}

[connection signal="body_entered" from="finish/Area" to="finish" method="_on_Area_body_entered"]
